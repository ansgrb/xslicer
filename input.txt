I first touched Android development when Jetpack Compose was not even a thing. In that time, doing Android development meant wrestling with these XML files and handling your UI layouts yourselfâ€”all that boilerplate code was such a pain. To be honest, I was never happy with this workflow; it felt pretty clunky. And I moved on pretty fast, leaving Android behind for the far-easier way of React Native.
Fast forward to my grad phase; I went all-in on React Native. It made perfect senseâ€”me and my entire team already knew JavaScript and React, so jumping into RN felt natural. It was simple to get started, especially with Expo SDK-I started when SDK 48 was still fresh. Expo did a lot of the heavy lifting, which allowed us to focus on development without having to dive deep into native configs. We built fast, iterated faster, and shipped apps with minimal headaches. It was honestly fun.
In that phase, I have used all kinds of boilerplates like Ignite and explored different state management libraries such as Zustand, Redux, Recoil, and Jotai. That was cool in many ways, yet somehow, at the same time, it was like I was just continuously hacking solutions together. Every new project began with the same tired ritual of trying to decide what combination of boilerplate, state management, and navigation library was going to work best. There's power in flexibility, but with it comes some serious trade-offs: you're using precious time putting together your stack instead of building the app itself.
Even though my grad project wasn't in mobile dev-it was in blockchain-I still kept experimenting with RN during that period, and at my startup, we fully embraced React Native as our stack for mobile development. It worked well for a while, but eventually, as our needs grew more complex and production-ready apps became the goal, the cracks started to show.
The Switch Back to Android: Firebase Talk Sparks Something
After hustling two years with React Native, I attended a GDG event at the GrEEK Campus in Cairo, and there was this presentation on new Firebase + AI integrations. So it caught my attention because, on our last project, we used Supabase, but seeing those new Firebase features, I thought, "You know what, let's give Firebase another shot." That's when Jetpack Compose then popped up unexpectedly on my radar.
I further dived into Jetpack Compose right after the event. No more XML, no more boilerplate UI code. It was a modern, declarative UI toolkit that looked and felt like React but was fully native. All of a sudden, everything clicked together: the frustrations I had with XML-based Android development made sense in retrospect since Jetpack Compose solved them so beautifully.
I also learned how Kotlin had evolved to become such a powerful language, with its features making it just perfect for modern app development: expressive, type-safe, and justâ€¦ clean. It felt like the Android ecosystem had been reborn.
Encouraging My Team to Switch!
After getting hooked myself, I asked my co-founders and the rest of my team at the startup to make the switch with me to Kotlin + Jetpack Compose for our mobile stack. We're all learning and making the switch now. It's a big move, but I'm convinced it's the right one. We're also exploring Kotlin Multiplatform for eventually building apps not just for Android but for iOS, desktop, and even web with a shared codebase.
It's exciting to think about where this shift will take us. RN was a great tool for learning and quick prototyping, but now, as we grow and aim for long-term, scalable mobile solutions, Kotlin + Jetpack Compose feels like the stack that will take us to the next level.
Final Thoughts ðŸ™„ðŸ¤ž
React Native was a great starting point for me and my team. It really helped us build and ship apps fast, especially with Expo making things so easy. However, regarding native performance, production-ready apps, and long-term scalability, Kotlin + Jetpack Compose wins hands down.
To anyone out there who may be wondering if Jetpack Compose is worth learning: believe me, it is. Most especially if you've been working in RN and are curious about native dev againâ€”just give it a shot. And if you're thinking of cross-platform, Kotlin Multiplatform is something you really want to take a look at.
#keeplearning